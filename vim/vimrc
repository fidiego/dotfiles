" -----
" .vimrc
"
" defines plugins
" sets some language specific things like indenting and syntax highlighting
"

set nocompatible               " be iMproved
filetype off                   " required!

" Plug: package management
call plug#begin('~/.vim/plugged')

" plugins
Plug 'airblade/vim-gitgutter'
Plug 'chr4/nginx.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'kien/rainbow_parentheses.vim'
Plug 'luochen1990/rainbow'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'
Plug 'prettier/vim-prettier'
Plug 'psf/black', { 'branch': 'stable' }
Plug 'sbdchd/neoformat'
Plug 'scrooloose/nerdtree'
Plug 'stephpy/vim-yaml'
Plug 'vim-syntastic/syntastic'

call plug#end()

""" General
" colorscheme monokai

" leader
" follow the leader
let mapleader = ","
let g:mapleader = ","
nnoremap <C-p> :GFiles<CR>

" coc
nmap <leader>gd <Plug>(coc-definition)
nmap <leader>gr <Plug>(coc-references)

" never in my life have i used ex mode
" i'm not sure what it is and at this point i'm too afraid to ask
nnoremap Q <nop>

" backspace
set backspace=indent,eol,start

" ruler
set ruler

" set line under cursor
set cursorline

" copy to clipboard
set clipboard=unnamed

" fold
set foldmethod=indent
set foldlevel=99
nnoremap <space> za

" turn highlighting on
set hlsearch

" autoread/autoreload changed files
" I git rebase a lot so this is useful
set autoread

" other stuff
set background=dark
set expandtab
set modeline
set number

syntax on
filetype indent plugin on

"""
""" Javascript settings
"""

autocmd FileType javascript setlocal shiftwidth=2 tabstop=2

" prettier lint files on save
autocmd BufWritePre *.js Neoformat
autocmd BufWritePre *.jsx Neoformat
let g:neoformat_try_formatprg = 1
let g:jsx_ext_required = 0

" max line length that prettier will wrap on
let g:prettier#config#print_width = 100
let g:prettier#config#tab_width = 2
let g:prettier#config#use_tabs = 'false'
let g:prettier#config#semi = 'true'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#bracket_spacing = 'false'
let g:prettier#config#jsx_bracket_same_line = 'true'
let g:prettier#config#trailing_comma = 'es5'
let g:prettier#config#parser = 'flow'
let g:prettier#config#config_precedence = 'prefer-file'
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md Prettier

"""
""" Python Settings
"""
autocmd FileType python set shiftwidth=4 softtabstop=4 tabstop=4
" highlight all python syntax
let python_highlight_all = 1
let g:syntastic_python_checkers=['flake8']
autocmd BufWritePre *.py execute ':Black'


""" HTML Settings
" html autocomplete
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

" ctrl p settings
let g:ctrlp_working_path_mode = 'a'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" nerd tree settings
let NERDTreeIgnore = ['\.pyc$']
map <C-n> :NERDTreeToggle<CR>

" nerdcommneter settings

""" Trim Whitespace on Save
" White space noise
function TrimWhiteSpace()
    %s/\s*$//
    ''
:endfunction

set list listchars=tab:>-,trail:·
" set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨

autocmd FileWritePre * call TrimWhiteSpace()
autocmd FileAppendPre * call TrimWhiteSpace()
autocmd FilterWritePre * call TrimWhiteSpace()
autocmd BufWritePre * call TrimWhiteSpace()
map <F2> :call TrimWhiteSpace()<CR>
map! <F2> :call TrimWhiteSpace()<CR>


""" Rainbow Parens Configs
let g:rainbow_conf = {
\   'guifgs': ['firebrick', 'seagreen3', 'darkorange3', 'royalblue3'],
\   'ctermfgs': ['lightmagenta', 'lightblue', 'lightyellow', 'lightcyan'],
\   'operators': '_,_',
\   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\   'separately': {
\       '*': {},
\       'tex': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\       },
\       'lisp': {
\           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\       },
\       'vim': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\       },
\       'html': {
\           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\       },
\       'css': 0,
\   }
\}


" rainbow parenthesis
let g:rainbow_active = 1
